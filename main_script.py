import sqlite3
from datetime import datetime, timedelta
from random_book_number_generator import *  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
from settings import *  # –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async def start(update: Update, context) -> int:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–∞–ª–µ—Ä–µ—é —á–µ—Ä–Ω—ã—Ö –∫–æ—à–µ–∫. üêà‚Äç‚¨õ –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=ReplyKeyboardMarkup(main_menu_keyboard, one_time_keyboard=True),
    )
    return CHOOSING  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–∞–ª–µ—Ä–µ–µ
async def gallery_info(update: Update, context) -> int:
    await update.message.reply_text(
        "–ì–∞–ª–µ—Ä–µ—è —á–µ—Ä–Ω—ã—Ö –∫–æ—à–µ–∫ - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –º–æ–∂–Ω–æ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –∫—Ä–∞—Å–æ—Ç–æ–π –∏ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é —á–µ—Ä–Ω—ã—Ö –∫–æ—à–µ–∫ –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ. üé®üêà‚Äç‚¨õ –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∏ –æ–∫—É–Ω–∏—Ç–µ—Å—å –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∑–∞–≥–∞–¥–æ—á–Ω–æ—Å—Ç–∏! ‚ú®",
        reply_markup=ReplyKeyboardMarkup(back_keyboard, one_time_keyboard=True),
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏
    await update.message.reply_location(latitude=53.33613, longitude=83.77797)

    return CHOOSING  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def choice(update: Update, context) -> int:
    user_choice = update.message.text
    if user_choice == "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å üóìÔ∏è":
        conn = sqlite3.connect(DATABASE_NAME)  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor = conn.cursor()
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS bookings (id INTEGER PRIMARY KEY, booking_number TEXT UNIQUE, date TEXT, time TEXT)"
        )
        conn.commit()
        conn.close()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        available_dates_times = get_available_dates_times()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–∞—Ç–∞–º–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        reply_keyboard = [[date.strftime("%d.%m.%Y")] for date, times in available_dates_times.items() if times]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)

        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É: üóìÔ∏è", reply_markup=markup
        )
        return SELECTING_DATE  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã

    elif user_choice == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—Ä–æ–Ω–∏ üìã":
        bookings = get_all_bookings_sorted()
        if bookings:
            booking_list = "\n".join(
                [f"‚Ä¢ {booking[0]} –≤ {booking[1]}" for booking in bookings]
            )  
            await update.message.reply_text(
                f"```\n–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n{booking_list}\n```",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardMarkup(back_keyboard, one_time_keyboard=True),
            )
        else:
            await update.message.reply_text(
                "–ù–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π. üòî", reply_markup=ReplyKeyboardMarkup(back_keyboard, one_time_keyboard=True)
            )
        return GETTING_BACK  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é

    elif user_choice == "–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å ‚ùå":
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å:",
            reply_markup=ReplyKeyboardRemove(),
        )
        return CANCELING  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

    elif user_choice == "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –≥–∞–ª–µ—Ä–µ–µ üêà‚Äç‚¨õ":
        await gallery_info(update, context)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–∞–ª–µ—Ä–µ–µ
        return GETTING_BACK  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.")
        return CHOOSING  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è

async def select_date(update: Update, context) -> None:
    selected_date_str = update.message.text
    try:
        selected_date = datetime.strptime(selected_date_str, "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.")
        return SELECTING_DATE

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–ª–µ–¥—É—é—â–∏—Ö 7 –¥–Ω–µ–π
    today = datetime.today().date()
    if selected_date < today or selected_date > today + timedelta(days=6):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 7 –¥–Ω–µ–π.")
        return SELECTING_DATE

    context.user_data["date"] = selected_date

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    available_times = get_available_times(selected_date)

    if not available_times:
        await update.message.reply_text(
            f"–ù–∞ {selected_date.strftime('%d.%m.%Y')} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
        )
        return CHOOSING

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–∞–º–∏
    reply_keyboard = [available_times[i : i + 3] for i in range(0, len(available_times), 3)]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    await update.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_date.strftime('%d.%m.%Y')}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è: üïê",
        reply_markup=markup,
    )
    return SELECTING_TIME

async def select_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_time = update.message.text
    selected_date = context.user_data["date"]

    try:
        booking_time = datetime.strptime(user_time, "%H:%M").time()
        if booking_time < datetime.strptime("10:00", "%H:%M").time() or booking_time > datetime.strptime("17:00", "%H:%M").time():
            raise ValueError() 
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –≤—Ä–µ–º—è –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (10:00 - 17:00).")
        return SELECTING_TIME

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ
    if is_time_slot_booked(selected_date, user_time):
        await update.message.reply_text(
            f"–í—Ä–µ–º—è {user_time} –Ω–∞ {selected_date.strftime('%d.%m.%Y')} —É–∂–µ –∑–∞–Ω—è—Ç–æ. üòî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
        )
        return SELECTING_TIME 

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    booking_number = generate_booking_number()

    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO bookings (booking_number, date, time) VALUES (?, ?, ?)",
        (booking_number, selected_date.strftime("%Y-%m-%d"), user_time),
    )
    conn.commit()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    gif_url = open(GIF_PATH, 'rb')
    await update.message.reply_animation(gif_url) 

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await update.message.reply_text(
        f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –Ω–∞ {selected_date.strftime('%d.%m.%Y')} –≤ {user_time}. üéâ\n"
        f"–í–∞—à –Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {booking_number}",
        reply_markup=ReplyKeyboardMarkup(back_keyboard, one_time_keyboard=True),
    )
    return GETTING_BACK

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
def get_available_dates_times():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∞
    cursor.execute("SELECT date, time FROM bookings")
    bookings = cursor.fetchall()

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω
    available_dates_times = {}

    # –ú–æ–∂–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ BOOKING_DAYS –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
    for days_ahead in range(BOOKING_DAYS):
        current_date = (datetime.today() + timedelta(days=days_ahead)).date()

        # –í—Å–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        booked_times = [
            booking[1] for booking in bookings if booking[0] == current_date.strftime("%Y-%m-%d")
        ]

        # –í—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞ —Ç–∞–∫—É—é –¥–∞—Ç—É
        all_times = ["10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00"]

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏
        available_times = [time for time in all_times if time not in booked_times]

        available_dates_times[current_date] = available_times

    conn.close()
    return available_dates_times

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
def get_available_times(selected_date):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    cursor.execute("SELECT time FROM bookings WHERE date = ?", (selected_date.strftime("%Y-%m-%d"),))
    booked_times = [row[0] for row in cursor.fetchall()]

    all_times = ["10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00"]

    available_times = [time for time in all_times if time not in booked_times]

    conn.close()
    return available_times

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
def get_all_bookings_sorted():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    cursor.execute("SELECT date, time FROM bookings ORDER BY date, time")
    bookings = cursor.fetchall()
    conn.close()

    return bookings

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
def is_time_slot_booked(selected_date, user_time):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    cursor.execute(
        "SELECT * FROM bookings WHERE date = ? AND time = ?",
        (selected_date.strftime("%Y-%m-%d"), user_time),
    )
    result = cursor.fetchone()
    conn.close()

    return bool(result)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async def cancel(update: Update, context) -> int:
    booking_number = update.message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if not booking_number.isdigit() or len(booking_number) != 6:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return CANCELING

    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM bookings WHERE booking_number = ?", (booking_number,))
    conn.commit()
    conn.close()

    if cursor.rowcount > 0:
        await update.message.reply_text(
            f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º {booking_number} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ. ‚úÖ",
            reply_markup=ReplyKeyboardMarkup(back_keyboard, one_time_keyboard=True),
        )
    else:
        await update.message.reply_text(
            f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º {booking_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. üòî",
            reply_markup=ReplyKeyboardMarkup(back_keyboard, one_time_keyboard=True),
        )

    return GETTING_BACK  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    application = Application.builder().token(
        MYTOKEN
    ).build()

    application.add_handler(
        ConversationHandler(
            entry_points=[CommandHandler("start", start)],  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            states={
                CHOOSING: [
                    MessageHandler(
                        filters.Regex(
                            r"^–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å üóìÔ∏è$|^–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—Ä–æ–Ω–∏ üìã$|^–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å ‚ùå$|^–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –≥–∞–ª–µ—Ä–µ–µ üêà‚Äç‚¨õ$"
                        ),
                        choice,
                    )
                ],
                SELECTING_DATE: [
                    MessageHandler(
                        filters.Regex(r"^\d{2}\.\d{2}\.\d{4}$"),
                        select_date,
                    )
                ],
                SELECTING_TIME: [
                    MessageHandler(
                        filters.Regex(r"^10:00$|^11:00$|^12:00$|^13:00$|^14:00$|^15:00$|^16:00$|^17:00$"),
                        select_time,
                    )
                ],
                CANCELING: [MessageHandler(filters.Regex(r"\d{6}"), cancel)],
                GETTING_BACK: [MessageHandler(filters.Regex(r"^–ù–∞–∑–∞–¥$"), start)],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )
    )

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()